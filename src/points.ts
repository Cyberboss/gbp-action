import { Configuration } from "./configuration"
import { GithubUser } from "./github"

export const HEADER =
    "# This file is @generated by the GBP actions. " +
    "If you edit this, preserve the format, and ensure IDs are sorted in numerical order.\n"

/// User IDs -> balances
export type Balances = Record<string, number>

export function getPointsFromLabels(
    configuration: Configuration,
    labels: string[],
): number {
    let points = 0
    for (const label of labels) {
        if (label === configuration.no_balance_label) {
            points = 0
            break
        } else {
            points += configuration.points.get(label) || 0
        }
    }

    return points
}

function getUserId(line: string): number | undefined {
    const userId = parseInt(line.split(" ")[0], 10)
    if (Number.isNaN(userId)) {
        return undefined
    }

    return userId
}

export function setBalance(
    tomlOutput: string | undefined,
    user: GithubUser,
    newBalance: number,
): string {
    const balanceLine = `${user.id} = ${newBalance} # ${user.login}`
    if (tomlOutput === undefined) {
        return HEADER + balanceLine
    }

    const replaceRegex = new RegExp(`${user.id} = .*`, "gm")
    const newOutput = tomlOutput.replace(replaceRegex, balanceLine)

    if (newOutput !== tomlOutput) {
        return newOutput
    }

    // Brand new name, find where it is in order
    const lines = tomlOutput.split("\n")

    for (const [lineNumber, line] of lines.entries()) {
        const userId = getUserId(line)
        if (userId === undefined) {
            continue
        }

        if (user.id < userId) {
            const linesUpdated = [...lines]
            linesUpdated.splice(lineNumber, 0, balanceLine)
            return linesUpdated.join("\n")
        }
    }

    return `${tomlOutput}\n${balanceLine}`
}
